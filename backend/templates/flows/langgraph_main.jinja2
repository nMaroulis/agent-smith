from langgraph.graph import StateGraph, START, END
from pydantic import BaseModel, Field
from typing import TypedDict, Annotated
from langgraph.graph.message import add_messages
import os


# === Import LLMs ===
{% for llm in llms %}
{{ llm }}
{% endfor %}

# === Import Tools ===
{% for tool in tools %}
{{ tool }}
{% endfor %}

# === Agent State ===
class State(BaseModel):
    """
    A state is a shared data structure that represents the current snapshot of your application.
    States are passed along edges between nodes, carrying the output of one node to the next as input.
    """
    messages: list = Field(default_factory=list, metadata={"langgraph_annotation": add_messages})
    message_type: Optional[str] = None
    next: Optional[str] = None

# === Node function stubs ===
{% for node in nodes %}
{{ node }}
{% endfor %}

graph = StateGraph()

# === Nodes ===
{% for node in nodes %}
graph.add_node("{{ node.function_name }}", {{ node.function_name }})
{% endfor %}
{#
    # === Entry and Exit Points ===
    graph.set_entry_point("{{ entry_point }}")
    graph.set_finish_point("{{ finish_point }}")
#}
# === Edges ===
{% for edge in edges %}
graph.add_edge({{ edge.source }}, {{ edge.target }})
{% endfor %}
app = graph.compile()